// Code generated by MockGen. DO NOT EDIT.
// Source: channel/go

// Package mock_channel is a generated GoMock package.
package channel

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/nixsolutions/go-rabbit-mq/config"
	connection "github.com/nixsolutions/go-rabbit-mq/connection"
	amqp "github.com/streadway/amqp"
	reflect "reflect"
)

// MockChannelInterface is a mock of ChannelInterface interface
type MockChannelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChannelInterfaceMockRecorder
}

// MockChannelInterfaceMockRecorder is the mock recorder for MockChannelInterface
type MockChannelInterfaceMockRecorder struct {
	mock *MockChannelInterface
}

// NewMockChannelInterface creates a new mock instance
func NewMockChannelInterface(ctrl *gomock.Controller) *MockChannelInterface {
	mock := &MockChannelInterface{ctrl: ctrl}
	mock.recorder = &MockChannelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChannelInterface) EXPECT() *MockChannelInterfaceMockRecorder {
	return m.recorder
}

// GetChannel mocks base method
func (m *MockChannelInterface) GetChannel() RChannelInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel")
	ret0, _ := ret[0].(RChannelInterface)
	return ret0
}

// GetChannel indicates an expected call of GetChannel
func (mr *MockChannelInterfaceMockRecorder) GetChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockChannelInterface)(nil).GetChannel))
}

// Create mocks base method
func (m *MockChannelInterface) Create(arg0 connection.RConnectionInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockChannelInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChannelInterface)(nil).Create), arg0)
}

// Close mocks base method
func (m *MockChannelInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockChannelInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChannelInterface)(nil).Close))
}

// QueueDeclare mocks base method
func (m *MockChannelInterface) QueueDeclare(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclare", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueDeclare indicates an expected call of QueueDeclare
func (mr *MockChannelInterfaceMockRecorder) QueueDeclare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockChannelInterface)(nil).QueueDeclare), arg0)
}

// QueueDeclareByConfig mocks base method
func (m *MockChannelInterface) QueueDeclareByConfig(arg0 config.QueueConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclareByConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueDeclareByConfig indicates an expected call of QueueDeclareByConfig
func (mr *MockChannelInterfaceMockRecorder) QueueDeclareByConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclareByConfig", reflect.TypeOf((*MockChannelInterface)(nil).QueueDeclareByConfig), arg0)
}

// ExchangeDeclare mocks base method
func (m *MockChannelInterface) ExchangeDeclare() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare")
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare
func (mr *MockChannelInterfaceMockRecorder) ExchangeDeclare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockChannelInterface)(nil).ExchangeDeclare))
}

// ExchangeDeclareByConfig mocks base method
func (m *MockChannelInterface) ExchangeDeclareByConfig(arg0 config.ExchangeConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclareByConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclareByConfig indicates an expected call of ExchangeDeclareByConfig
func (mr *MockChannelInterfaceMockRecorder) ExchangeDeclareByConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclareByConfig", reflect.TypeOf((*MockChannelInterface)(nil).ExchangeDeclareByConfig), arg0)
}

// BindQueue mocks base method
func (m *MockChannelInterface) BindQueue() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindQueue")
	ret0, _ := ret[0].(error)
	return ret0
}

// BindQueue indicates an expected call of BindQueue
func (mr *MockChannelInterfaceMockRecorder) BindQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindQueue", reflect.TypeOf((*MockChannelInterface)(nil).BindQueue))
}

// BindQueueByConfig mocks base method
func (m *MockChannelInterface) BindQueueByConfig(bqc config.BindQueueConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindQueueByConfig", bqc)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindQueueByConfig indicates an expected call of BindQueueByConfig
func (mr *MockChannelInterfaceMockRecorder) BindQueueByConfig(bqc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindQueueByConfig", reflect.TypeOf((*MockChannelInterface)(nil).BindQueueByConfig), bqc)
}

// Publish mocks base method
func (m *MockChannelInterface) Publish(arg0 amqp.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockChannelInterfaceMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockChannelInterface)(nil).Publish), arg0)
}

// PublishWithParams mocks base method
func (m *MockChannelInterface) PublishWithParams(exchange, routingKey string, mandatory, immediate bool, body amqp.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithParams", exchange, routingKey, mandatory, immediate, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithParams indicates an expected call of PublishWithParams
func (mr *MockChannelInterfaceMockRecorder) PublishWithParams(exchange, routingKey, mandatory, immediate, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithParams", reflect.TypeOf((*MockChannelInterface)(nil).PublishWithParams), exchange, routingKey, mandatory, immediate, body)
}

// Consume mocks base method
func (m *MockChannelInterface) Consume() (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume")
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume
func (mr *MockChannelInterfaceMockRecorder) Consume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockChannelInterface)(nil).Consume))
}

// ConsumeByConfig mocks base method
func (m *MockChannelInterface) ConsumeByConfig(cc config.ConsumerConfig) (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeByConfig", cc)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeByConfig indicates an expected call of ConsumeByConfig
func (mr *MockChannelInterfaceMockRecorder) ConsumeByConfig(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeByConfig", reflect.TypeOf((*MockChannelInterface)(nil).ConsumeByConfig), cc)
}

// MockRChannelInterface is a mock of RChannelInterface interface
type MockRChannelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRChannelInterfaceMockRecorder
}

// MockRChannelInterfaceMockRecorder is the mock recorder for MockRChannelInterface
type MockRChannelInterfaceMockRecorder struct {
	mock *MockRChannelInterface
}

// NewMockRChannelInterface creates a new mock instance
func NewMockRChannelInterface(ctrl *gomock.Controller) *MockRChannelInterface {
	mock := &MockRChannelInterface{ctrl: ctrl}
	mock.recorder = &MockRChannelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRChannelInterface) EXPECT() *MockRChannelInterfaceMockRecorder {
	return m.recorder
}

// QueueDeclare mocks base method
func (m *MockRChannelInterface) QueueDeclare(arg0 string, arg1, arg2, arg3, arg4 bool, arg5 amqp.Table) (amqp.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclare", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDeclare indicates an expected call of QueueDeclare
func (mr *MockRChannelInterfaceMockRecorder) QueueDeclare(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockRChannelInterface)(nil).QueueDeclare), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ExchangeDeclare mocks base method
func (m *MockRChannelInterface) ExchangeDeclare(arg0, arg1 string, arg2, arg3, arg4, arg5 bool, arg6 amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare
func (mr *MockRChannelInterfaceMockRecorder) ExchangeDeclare(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockRChannelInterface)(nil).ExchangeDeclare), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// QueueBind mocks base method
func (m *MockRChannelInterface) QueueBind(arg0, arg1, arg2 string, arg3 bool, arg4 amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueBind", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBind indicates an expected call of QueueBind
func (mr *MockRChannelInterfaceMockRecorder) QueueBind(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBind", reflect.TypeOf((*MockRChannelInterface)(nil).QueueBind), arg0, arg1, arg2, arg3, arg4)
}

// Publish mocks base method
func (m *MockRChannelInterface) Publish(arg0, arg1 string, arg2, arg3 bool, arg4 amqp.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockRChannelInterfaceMockRecorder) Publish(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRChannelInterface)(nil).Publish), arg0, arg1, arg2, arg3, arg4)
}

// Qos mocks base method
func (m *MockRChannelInterface) Qos(arg0, arg1 int, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Qos", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Qos indicates an expected call of Qos
func (mr *MockRChannelInterfaceMockRecorder) Qos(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Qos", reflect.TypeOf((*MockRChannelInterface)(nil).Qos), arg0, arg1, arg2)
}

// Consume mocks base method
func (m *MockRChannelInterface) Consume(arg0, arg1 string, arg2, arg3, arg4, arg5 bool, arg6 amqp.Table) (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume
func (mr *MockRChannelInterfaceMockRecorder) Consume(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockRChannelInterface)(nil).Consume), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Close mocks base method
func (m *MockRChannelInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRChannelInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRChannelInterface)(nil).Close))
}
